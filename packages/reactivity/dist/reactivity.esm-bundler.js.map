{"version":3,"file":"reactivity.esm-bundler.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts"],"sourcesContent":["export const isObject = (value) => value !== null && typeof value === 'object';\nexport const extend = Object.assign;\nexport const isArray = Array.isArray;\nexport const isFunction = (val) => typeof val === 'function';\nexport const isNumber = (val) => typeof val === 'number';\nexport const isString = (val) => typeof val === 'string';\n// 判断是不是一个数字类型的key\nexport const isIntegerKey = (key) => parseInt(key) + '' === key;\nexport const hasOwn = (target, key) =>\n  Object.prototype.hasOwnProperty.call(target, key);\nexport const hasChanged = (value, oldValue) => value !== oldValue;\n","import { isArray, isIntegerKey } from '@vue/shared';\nimport { TriggerOpTypes } from './operators';\n\nexport function effect(fn, options: any = {}) {\n  // 需要让这个effect变成响应式的effect，可以做到数据变化重新执行\n  const effect = createReactivityEffect(fn, options);\n\n  if (!options.lazy) {\n    // lazy 属性用于标识effect是否是懒执行的\n    effect(); // 响应式的effect默认会先执行一次\n  }\n  return effect;\n}\n\nlet uid = 0;\nlet activeEffect; // 存储当前的effect\nconst effectStack = []; // 存储effect的栈\nfunction createReactivityEffect(fn, options) {\n  const effect = function reactivityEffect() {\n    // 防止出现类似 state.xxx ++ 每次+1都会触发effect执行 死循环的情况\n    if (!effectStack.includes(effect)) {\n      // 保证effect没有加入到effectStack中\n      try {\n        effectStack.push(effect); // 将effect存入effectStack\n        activeEffect = effect; // 此属性会和当前的属性做关联\n        return fn(); // 函数执行时会取值，会执行get方法\n      } finally {\n        // try finally 确保fn出错时，仍能正确出栈\n        effectStack.pop(); // 出栈 将effect移除\n        activeEffect = effectStack[effectStack.length - 1]; // 获取栈中的最后一个\n      }\n    }\n  };\n\n  effect.id = uid++; // effect的唯一标识，组件渲染时会用到这个id\n  effect._isEffect = true; // 用于标识这个是响应式effect\n  effect.raw = fn; // 保留effect对应的原函数\n  effect.options = options; // 在effect上保存用户的属性\n\n  return effect;\n}\n\n// 让某个对象中的属性 收集当前他对应的effect函数\nconst targetMap = new WeakMap();\nexport function track(target, type, key) {\n  // 可以拿到当前的effect\n  // activeEffect; // 当前正在运行的effect\n  if (activeEffect === undefined) {\n    // 此属性不用收集依赖，因为在effect外面使用的\n    return;\n  }\n  // 判断映射表里是否有这个对象\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, (depsMap = new Map()));\n  }\n  // 判断value里是否有这个属性key（name、age）\n  let dep = depsMap.get(key);\n  if (!dep) {\n    // 用set因为一个属性可能有多个effect，所以用一个集合来维护\n    depsMap.set(key, (dep = new Set()));\n  }\n  // 判断当前属性是否有当前的effect\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect); // 收集对应的effect\n  }\n}\n// weekMap key => {name: 'mh', age:27} value (map) => {name => set, age => set}\n// 结构 {name: 'mh', age:27} => name => [effect effect]\n\n// 函数调用是个栈型结构，后进先出 [effect1, effect2]\n// 实现用到堆栈的原因，仅声明activeEffect会导致拿不到正确的effect\n// effect(() => { // effect1\n//   state.name -> effect1\n//   effect(() => { //effect2\n//     state.age; -> effect2\n//   })\n//   state.address -> effect2 应该为 effect1\n// });\n\n// 找属性对应的effect，让其执行（数组、对象）\nexport function trigger(target, type, key?, newValue?, oldValue?) {\n  // 如果这个属性没有收集过effect，那不需要做任何操作\n  const depsMap = targetMap.get(target);\n  if (!depsMap) return;\n\n  const effects = new Set(); // 同一个effect中多个值变化，会合并去重，只会触发一次\n  const add = (effectsToAdd) => {\n    if (effectsToAdd) {\n      effectsToAdd.forEach((effect) => effects.add(effect));\n    }\n  };\n  // 我要将所有的要执行的effect 全部存到一个新的集合中，最终一起执行\n  // 1.如果修改的是数组的长度，会触发数组的length属性，以及索引对应的属性\n  if (key === 'length' && isArray(target)) {\n    // 如果长度有依赖收集，那么修改length时，需要触发依赖收集\n    depsMap.forEach((dep, key) => {\n      // 类似一个hack\n      if (key === 'length' || key > newValue)\n        // length = 1 key = 2 如果更改的长度小于索引，那么对应的索引也需要触发effect重新执行\n        add(dep);\n    });\n  } else {\n    // 可能是对象\n    if (key !== undefined) {\n      // 这里肯定是修改，不能是新增\n      add(depsMap.get(key)); // 如果是新增属性，那么也需要触发effect执行\n    }\n    // 如果添加了一个索引，就触发长度的更新\n    switch (type) {\n      case TriggerOpTypes.ADD:\n        // target是数组且更改的是索引\n        if (isArray(target) && isIntegerKey(key)) {\n          // 虽然改的是索引，但要触发length对应的effect\n          add(depsMap.get('length'));\n        }\n    }\n  }\n  effects.forEach((effect: any) => effect());\n}\n","// 实现 new Proxy(target, baseHandlers) 的 baseHandlers\n// 是不是仅读的，仅读的属性set时会报异常\n// 是不是深度的\n\nimport {\n  extend,\n  hasChanged,\n  hasOwn,\n  isArray,\n  isIntegerKey,\n  isObject,\n} from '@vue/shared';\nimport { reactive, readonly } from './reactive';\nimport { track, trigger } from './effect';\nimport { TrackOpTypes, TriggerOpTypes } from './operators';\n\nconst get = createGetter();\nconst shallowGet = createGetter(false, true);\nconst readonlyGet = createGetter(true);\nconst shallowReadonlyGet = createGetter(true, true);\n\nconst set = createSetter();\nconst shallowSet = true;\n\nexport const mutableHandlers = {\n  get,\n  set,\n};\nexport const shallowReactiveHandlers = {\n  get: shallowGet,\n  set: shallowSet,\n};\n\nlet readonlyObj = {\n  set: (target, key) => {\n    console.warn(`set key ${key} failed`);\n  },\n};\n\nexport const readonlyHandlers = extend(\n  {\n    get: readonlyGet,\n  },\n  readonlyObj\n);\n\nexport const shallowReadonlyHandlers = extend(\n  {\n    get: shallowReadonlyGet,\n  },\n  readonlyObj\n);\n\nfunction createGetter(isReadonly = false, shallow = false) {\n  // 拦截获取功能\n  return function get(target, key, receiver) {\n    // let proxy = reactive()\n    // proxy + reflect 反射\n    // 后续Object上的方法会被迁移到Reflect上， Object.getPrototypeOf => Reflect.getPrototypeOf\n    // 以前target[key] = value 方式设置值可能会失败，比如原型上有这个属性，但是设置不成功。并不会报异常，也没有返回值标识\n    // Reflect 方法具备返回值，返回值标识是否设置成功\n    // reflect 使用可以不使用proxy 但是proxy必须配合reflect一起使用\n    const res = Reflect.get(target, key, receiver); // target[key]\n    if (!isReadonly) {\n      // 可能被改，收集依赖，等会数据变化后更新对应的视图\n      // console.log('执行ef fect时会取值', '收集effect');\n      track(target, TrackOpTypes.GET, key);\n    }\n    if (shallow) {\n      return res;\n    }\n    // 是对象 有可能要递归\n    if (isObject(res)) {\n      // vue2 是一上来就递归，vue3 是当取值的时候才会代理，vue3的代理模式是懒代理\n      return isReadonly ? readonly(res) : reactive(res);\n    }\n    return res;\n  };\n}\n\nfunction createSetter(shallow = false) {\n  return function set(target, key, value, receiver) {\n    const oldValue = target[key]; // 获取老的值\n    // 既是数组，修改的也是他的索引 如果索引比数组的长度大，相当于新增\n    let hadKey =\n      isArray(target) && isIntegerKey(key)\n        ? Number(key) < target.length\n        : hasOwn(target, key);\n    const result = Reflect.set(target, key, value, receiver); // target[key] = value\n    // 1. 要区分是新增还是修改 vue2里无法监控更改索引，无法监控数组的长度\n    // 变化 => hack的方法，需要特殊处理\n    if (!hadKey) {\n      // 新增\n      trigger(target, TriggerOpTypes.ADD, key, value);\n    } else if (hasChanged(oldValue, value)) {\n      // 修改\n      trigger(target, TriggerOpTypes.SET, key, value, oldValue);\n    }\n\n    // 当数据更新时，通知对应属性的effect重新执行\n\n    return result;\n  };\n} // 拦截设置功能\n","import { isObject } from '@vue/shared';\nimport {\n  mutableHandlers,\n  shallowReactiveHandlers,\n  readonlyHandlers,\n  shallowReadonlyHandlers,\n} from './baseHandlers';\n\nexport function reactive(target) {\n  return createReactiveObject(target, false, mutableHandlers);\n}\n\nexport function shallowReactive(target) {\n  return createReactiveObject(target, false, shallowReactiveHandlers);\n}\n\nexport function readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers);\n}\n\nexport function shallowReadonly(target) {\n  return createReactiveObject(target, true, shallowReadonlyHandlers);\n}\n\n// 是不是仅读，是不是深度 new Proxy() 最核心的需要拦截数据的读取和数据的修改 get set\n// 每个方法都能根据不同的参数处理不同的逻辑（柯里化），根据参数实现不同的功能\n// 内存空间\nconst reactiveMap = new WeakMap(); // 会自动垃圾回收，不会造成内存泄漏，key只能是对象\nconst readonlyMap = new WeakMap();\nexport function createReactiveObject(target, isReadonly, baseHandler) {\n  // 如果目标不是对象，没法拦截，reactive这个api只能拦截对象类型\n  if (!isObject(target)) {\n    return target;\n  }\n  // 如果某个对象已经被代理过了，就不要再次代理了，可能一个对象被代理的是深度，又被仅读代理了\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\n  const existProxy = proxyMap.get(target); // 如果已经被代理过了，就直接返回即可\n  if (existProxy) {\n    return existProxy;\n  }\n  const proxy = new Proxy(target, baseHandler);\n  proxyMap.set(target, proxy); // 将要代理的对象和对应的代理结果缓存起来\n  return proxy;\n}\n","/**\n * ref和reactive的区别\n * reactive内部采用的是proxy，而ref内部使用的是defineProperty\n * reactive处理不了基本类型，ref可以处理基本类型\n */\nexport function ref(value) {\n  // value是一个普通类型，也可以是对象，但是一般情况下是对象直接用reactive更合理\n  // 将普通类型变成一个对象\n  return createRef(value);\n}\n\nexport function shallowRef(value) {\n  return createRef(value, true);\n}\n\n// 后续 看vue的源码，基本都是高阶函数，做了类似柯里化的操作\n\nclass RefImpl {\n  public _value; // 表示 声明了一个_value属性，但是没有赋值\n  public __v_isRef = true; // 产生的实例会被添加__v_isRef 表示是一个ref属性\n  constructor(public rawValue, public shallow) {\n    //参数中前面增加修饰符 表示此属性放到了实例上, 不加public，就不会放到this上\n  }\n}\n\nfunction createRef(rawValue, shallow = false) {\n  return new RefImpl(rawValue, shallow);\n}\n"],"names":[],"mappings":"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"}