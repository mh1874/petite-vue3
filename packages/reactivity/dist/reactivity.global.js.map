{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts"],"sourcesContent":["export const isObject = (value) => value !== null && typeof value === 'object';\nexport const extend = Object.assign;\n","export function effect(fn, options: any = {}) {\n  // 需要让这个effect变成响应式的effect，可以做到数据变化重新执行\n  const effect = createReactivityEffect(fn, options);\n\n  if (!options.lazy) {\n    // lazy 属性用于标识effect是否是懒执行的\n    effect(); // 响应式的effect默认会先执行一次\n  }\n  return effect;\n}\n\nlet uid = 0;\nlet activeEffect; // 存储当前的effect\nconst effectStack = []; // 存储effect的栈\nfunction createReactivityEffect(fn, options) {\n  const effect = function reactivityEffect() {\n    // 防止出现类似 state.xxx ++ 每次+1都会触发effect执行 死循环的情况\n    if (!effectStack.includes(effect)) {\n      // 保证effect没有加入到effectStack中\n      try {\n        effectStack.push(effect); // 将effect存入effectStack\n        activeEffect = effect; // 此属性会和当前的属性做关联\n        return fn(); // 函数执行时会取值，会执行get方法\n      } finally {\n        // try finally 确保fn出错时，仍能正确出栈\n        effectStack.pop(); // 出栈 将effect移除\n        activeEffect = effectStack[effectStack.length - 1]; // 获取栈中的最后一个\n      }\n    }\n  };\n\n  effect.id = uid++; // effect的唯一标识，组件渲染时会用到这个id\n  effect._isEffect = true; // 用于标识这个是响应式effect\n  effect.raw = fn; // 保留effect对应的原函数\n  effect.options = options; // 在effect上保存用户的属性\n\n  return effect;\n}\n\n// 让某个对象中的属性 收集当前他对应的effect函数\nconst targetMap = new WeakMap();\nexport function track(target, type, key) {\n  // 可以拿到当前的effect\n  // activeEffect; // 当前正在运行的effect\n  if (activeEffect === undefined) {\n    // 此属性不用收集依赖，因为在effect外面使用的\n    return;\n  }\n  // 判断映射表里是否有这个对象\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, (depsMap = new Map()));\n  }\n  // 判断value里是否有这个属性key（name、age）\n  let dep = depsMap.get(key);\n  if (!dep) {\n    // 用set因为一个属性可能有多个effect，所以用一个集合来维护\n    depsMap.set(key, (dep = new Set()));\n  }\n  // 判断当前属性是否有当前的effect\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect); // 收集对应的effect\n  }\n  console.log('targetMap ==>', targetMap);\n}\n// weekMap key => {name: 'mh', age:27} value (map) => {name => set, age => set}\n// 结构 {name: 'mh', age:27} => name => [effect effect]\n\n// 函数调用是个栈型结构，后进先出 [effect1, effect2]\n// 实现用到堆栈的原因，仅声明activeEffect会导致拿不到正确的effect\n// effect(() => { // effect1\n//   state.name -> effect1\n//   effect(() => { //effect2\n//     state.age; -> effect2\n//   })\n//   state.address -> effect2 应该为 effect1\n// });\n","// 实现 new Proxy(target, baseHandlers) 的 baseHandlers\n// 是不是仅读的，仅读的属性set时会报异常\n// 是不是深度的\n\nimport { extend, isObject } from '@vue/shared';\nimport { reactive, readonly } from './reactive';\nimport { track } from './effect';\nimport { TrackOpTypes } from './operators';\n\nconst get = createGetter();\nconst shallowGet = createGetter(false, true);\nconst readonlyGet = createGetter(true);\nconst shallowReadonlyGet = createGetter(true, true);\n\nconst set = createSetter();\nconst shallowSet = true;\n\nexport const mutableHandlers = {\n  get,\n};\nexport const shallowReactiveHandlers = {\n  get: shallowGet,\n};\n\nlet readonlyObj = {\n  set: (target, key) => {\n    console.warn(`set key ${key} failed`);\n  },\n};\n\nexport const readonlyHandlers = extend(\n  {\n    get: readonlyGet,\n  },\n  readonlyObj\n);\n\nexport const shallowReadonlyHandlers = extend(\n  {\n    get: shallowReadonlyGet,\n  },\n  readonlyObj\n);\n\nfunction createGetter(isReadonly = false, shallow = false) {\n  // 拦截获取功能\n  return function get(target, key, receiver) {\n    // let proxy = reactive()\n    // proxy + reflect 反射\n    // 后续Object上的方法会被迁移到Reflect上， Object.getPrototypeOf => Reflect.getPrototypeOf\n    // 以前target[key] = value 方式设置值可能会失败，比如原型上有这个属性，但是设置不成功。并不会报异常，也没有返回值标识\n    // Reflect 方法具备返回值，返回值标识是否设置成功\n    // reflect 使用可以不使用proxy 但是proxy必须配合reflect一起使用\n    const res = Reflect.get(target, key, receiver); // target[key]\n    if (!isReadonly) {\n      // 可能被改，收集依赖，等会数据变化后更新对应的视图\n      // console.log('执行ef fect时会取值', '收集effect');\n      track(target, TrackOpTypes.GET, key);\n    }\n    if (shallow) {\n      return res;\n    }\n    // 是对象 有可能要递归\n    if (isObject(res)) {\n      // vue2 是一上来就递归，vue3 是当取值的时候才会代理，vue3的代理模式是懒代理\n      return isReadonly ? readonly(res) : reactive(res);\n    }\n    return res;\n  };\n}\n\nfunction createSetter(shallow = false) {\n  // 拦截获取功能\n  return function set(target, key, value, receiver) {\n    const result = Reflect.set(target, key, value, receiver); // target[key] = value\n  };\n\n  // 当数据更新时，通知对应属性的effect重新执行\n} // 拦截设置功能\n","import { isObject } from '@vue/shared';\nimport {\n  mutableHandlers,\n  shallowReactiveHandlers,\n  readonlyHandlers,\n  shallowReadonlyHandlers,\n} from './baseHandlers';\n\nexport function reactive(target) {\n  return createReactiveObject(target, false, mutableHandlers);\n}\n\nexport function shallowReactive(target) {\n  return createReactiveObject(target, false, shallowReactiveHandlers);\n}\n\nexport function readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers);\n}\n\nexport function shallowReadonly(target) {\n  return createReactiveObject(target, true, shallowReadonlyHandlers);\n}\n\n// 是不是仅读，是不是深度 new Proxy() 最核心的需要拦截数据的读取和数据的修改 get set\n// 每个方法都能根据不同的参数处理不同的逻辑（柯里化），根据参数实现不同的功能\n// 内存空间\nconst reactiveMap = new WeakMap(); // 会自动垃圾回收，不会造成内存泄漏，key只能是对象\nconst readonlyMap = new WeakMap();\nexport function createReactiveObject(target, isReadonly, baseHandler) {\n  // 如果目标不是对象，没法拦截，reactive这个api只能拦截对象类型\n  if (!isObject(target)) {\n    return target;\n  }\n  // 如果某个对象已经被代理过了，就不要再次代理了，可能一个对象被代理的是深度，又被仅读代理了\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\n  const existProxy = proxyMap.get(target); // 如果已经被代理过了，就直接返回即可\n  if (existProxy) {\n    return existProxy;\n  }\n  const proxy = new Proxy(target, baseHandler);\n  proxyMap.set(target, proxy); // 将要代理的对象和对应的代理结果缓存起来\n  return proxy;\n}\n"],"names":[],"mappings":"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"}